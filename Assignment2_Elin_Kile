import pandas as pd
import matplotlib.pyplot as plt
import random
import numpy as np
import scipy.stats as stats
import os

def estimate_gamma_parameters(data):
    """
    Estimate the beta parameter for a Gamma distribution.
    Alpha is assumed to be known and equals 2.
    """
    alpha = 2
    n0 = len(data)
    sum_data = np.sum(data)
    beta_hat = sum_data / (n0 * alpha)
    return beta_hat

def estimate_gaussian_parameters(data):
    """
    Estimate the mu and sigma parameters for a Gaussian distribution.
    """
    n1 = len(data)
    mu_hat = np.mean(data)
    sigma_hat_squared = np.sum((data - mu_hat)**2) / n1
    sigma_hat = np.sqrt(sigma_hat_squared)
    return mu_hat, sigma_hat



# specify directory where file is found
# check if I'm running the script on my mac or my pc
os_name = os.name
if os.name == 'nt': # windows    
     WDIR = "c:/Users/eak504/Documents/FYS2021/"
elif os_name == 'posix': 
    # iOS
    WDIR ="/Users/elkil7541/Library/CloudStorage/OneDrive-UiTOffice365/Dokumenter/FYS_2021/"
else: 
    print("Unknown directory")


# specify file name
file = WDIR + "data_problem2.csv"

# read file to data frame using pd.read_csv(), file is read into a data frame
df = pd.read_csv(file, header=None)

# number of samples and features
print(df.info)

def create_hist(data):
    # plot histogram of the data in the data frame. 
    plt.hist(data, bins=50)
    plt.xlabel('Data values')
    plt.ylabel('Number of samples')
    # save histogram
    plt.savefig('histogram.png')
    # show histogram
    plt.show()

# Call function to produce, print and save the histogram. Since the sample points are in the first row, I index into it by df.iloc[0].
create_hist(df.iloc[0])


# in order to more easily work with the data, I will transpose the dataframe and add column names, 'Samples' and 'Class'

df = df.transpose()
df.columns = ['Samples', 'Class']

# set the test dataset portion 
test_size = 0.2

# calculate the number of test samples in each class, since it is a portion, it might not be a whole number, so thus convert to int
test_counts = (df['Class'].value_counts() * test_size).astype(int)

# Create empty data frames for the train and test sets
train = pd.DataFrame()
test = pd.DataFrame()

for cls in test_counts.index:
    cls_subset = df[df['Class'] == cls]
    test_samples = cls_subset.sample(int(test_counts[cls]))
    train_samples = cls_subset.drop(test_samples.index)
    test = pd.concat([test, test_samples])
    train = pd.concat([train, train_samples])

# shuffle the sets to randomize order
train = train.sample(frac=1).reset_index(drop=True)
test = test.sample(frac=1).reset_index(drop=True)


# Example data for class C0 and C1
data_c0 = np.array([2.0, 3.0, 2.5, 3.5, 2.8])  # Gamma distribution data
data_c1 = np.array([10.0, 12.0, 11.5, 9.5, 10.5])  # Gaussian distribution data

# Estimate parameters
beta_hat = estimate_gamma_parameters(data_c0)
mu_hat, sigma_hat = estimate_gaussian_parameters(data_c1)

print("Estimated Beta for Gamma distribution (C0):", beta_hat)
print("Estimated Mu for Gaussian distribution (C1):", mu_hat)
print("Estimated Sigma for Gaussian distribution (C1):", sigma_hat)



